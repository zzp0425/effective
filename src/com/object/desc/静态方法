解释此处静态工厂方法是什么
    静态工厂方法只是一个返回类的实例的静态方法。

1、静态工厂方法与工厂方法不同的优势
    1)它们有名称
    2)不必在每次调用它们的时候都创建一个新对象
    3)他们可以返回原返回类型的任何子类型的对象
        1> 如EnumSet,
             当元素少于或等于64时，返回实现类RegalarEnumSet
             当元素多余64时，返回实现类JumboEnumSet
        2>服务提供者框架
            ①服务接口(Service Interface)
                这是提供者实现的: Connection
            ②提供者注册API(Provider Registration API)
                这是系统用来注册实现，让客户端访问它们的: DriverManager.registerDriver
            ③服务访问API(Service Access API)
                这是客户端用来获取服务的实例的: DriverManager.getConnection
            ④服务提供者接口(Service Provider Interface)
                可选
                这是提供者负责创建其服务实现的实例: Driver
    4)在创建参数化类型实例的时候，它们使代码变得更加简洁
        如以前使用Map<String, List<String>> map = new HashMap<String, List<String>>();
      随着类型参数变得越长，越复杂。
        但是使用静态工厂方法，编译器会替你找到类型参数。这被称作类型推导(type inference)
        例如HashMap提供了这个静态工厂:

        public static <K, V> HashMap<K, V> newInstance() {
            return new HashMap<K， V>();
        }

        如此，就可使用Map<String, List<String>> map = HashMap.newInstance();

2、静态工厂方法的主要缺点
      1)类如果不包含公有的或者受保护的构造器，就不能被继承。
      2)它们与其他的静态方法实际上没有任何区别